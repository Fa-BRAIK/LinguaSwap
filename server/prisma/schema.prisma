// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id            Int            @id @default(autoincrement())
  name          String
  email         String         @unique
  salt          String
  password      String
  created_at    DateTime       @default(now())
  updated_at    DateTime       @default(now()) @updatedAt
  refreshTokens RefreshToken[]

  @@map("admins")
}

model User {
  id                            Int       @id @default(autoincrement())
  name                          String
  email                         String    @unique
  email_validated_at            DateTime?
  phone_number                  String?   @unique
  phone_number_verified_at      DateTime?
  salt                          String
  password                      String
  profile_image                 String?
  cover_image                   String?
  gender                        String?
  date_of_birth                 DateTime? @db.Date
  introduction                  String?   @db.Text
  occupation                    String?
  interests                     String?   @db.Text
  hobbies                       String?   @db.Text
  website                       String?
  language_practice_preferences String?   @db.Text
  availability                  String?   @db.Text
  created_at                    DateTime  @default(now())
  updated_at                    DateTime  @default(now()) @updatedAt

  addresses           Address[]
  socialMediaProfiles SocialMediaProfile[]
  userLanguages       UserLanguage[]
  followers           Follower[]           @relation(name: "followers")
  followings          Follower[]           @relation(name: "followings")
  raters              Rating[]             @relation(name: "raters")
  ratings             Rating[]             @relation(name: "ratings")
  createdChatMembers  ChatMember[]         @relation(name: "creator")
  chatMembers         ChatMember[]
  chatMessages        ChatMessage[]
  refreshTokens       RefreshToken[]

  @@map("users")
}

enum AuthenticableType {
  USER
  ADMIN
}

model RefreshToken {
  id         Int      @id @default(autoincrement())
  token      String   @db.Text
  created_at DateTime @default(now())
  expires_at DateTime

  admin Admin? @relation(fields: [authenticable_id], references: [id], map: "admin_authenticable_id")
  user  User?  @relation(fields: [authenticable_id], references: [id], map: "user_authenticable_id")

  authenticable_id   Int
  authenticable_type AuthenticableType @default(USER)

  @@map("refresh_tokens")
}

model SocialMediaProfile {
  id           Int    @id @default(autoincrement())
  profile_type String
  profile_url  String

  user    User @relation(fields: [user_id], references: [id])
  user_id Int

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@map("social_media_profiles")
}

model EducationLevel {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  resume      String
  description String   @db.Text
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt

  @@map("education_levels")
}

model Country {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  code       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  states State[]

  @@map("countries")
}

model State {
  id   Int    @id @default(autoincrement())
  name String

  country    Country @relation(fields: [country_id], references: [id])
  country_id Int

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  Cities City[]

  @@map("states")
}

model City {
  id   Int    @id @default(autoincrement())
  name String

  state    State @relation(fields: [state_id], references: [id])
  state_id Int

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  addresses Address[]

  @@map("cities")
}

model Address {
  id          Int      @id @default(autoincrement())
  address_1   String
  address_2   String?
  postal_code String
  latitude    Decimal?
  longitude   Decimal?
  type        String   @default("home")
  is_default  Boolean  @default(false)

  user    User @relation(fields: [user_id], references: [id])
  user_id Int

  city    City @relation(fields: [city_id], references: [id])
  city_id Int

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@map("addresses")
}

model Language {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String   @db.Text
  difficulty  Int      @db.UnsignedTinyInt
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt

  userLanguages UserLanguage[]

  @@map("languages")
}

model UserLanguage {
  level Int @db.UnsignedTinyInt

  language    Language @relation(fields: [language_id], references: [id])
  language_id Int

  user    User @relation(fields: [user_id], references: [id])
  user_id Int

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@id([language_id, user_id])
  @@map("user_languages")
}

model Post {
  id         Int      @id @default(autoincrement())
  title      String
  content    String   @db.MediumText
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  taggables Taggable[]

  @@map("posts")
}

model Reel {
  id          Int      @id @default(autoincrement())
  title       String
  description String?  @db.Text
  reel_file   String
  created_at  DateTime @default(now())

  taggables Taggable[]

  @@map("reels")
}

model Tag {
  id         Int      @id @default(autoincrement())
  name       String
  created_at DateTime @default(now())

  taggables Taggable[]

  @@map("tags")
}

enum TaggableType {
  POST
  REEL
}

model Taggable {
  tag    Tag @relation(fields: [tag_id], references: [id])
  tag_id Int

  post Post? @relation(fields: [taggable_id], references: [id], map: "post_taggable_id")
  reel Reel? @relation(fields: [taggable_id], references: [id], map: "reel_taggable_id")

  taggable_type TaggableType @default(POST)
  taggable_id   Int

  @@id([tag_id, taggable_id, taggable_type])
  @@map("taggables")
}

model Follower {
  following    User @relation(fields: [following_id], references: [id], name: "followings")
  following_id Int

  follower    User @relation(fields: [follower_id], references: [id], name: "followers")
  follower_id Int

  created_at DateTime @default(now())

  @@id([following_id, follower_id])
  @@map("followers")
}

model Rating {
  user    User @relation(fields: [user_id], references: [id], name: "raters")
  user_id Int
  value   Int  @db.UnsignedTinyInt

  rater         User @relation(fields: [rater_user_id], references: [id], name: "ratings")
  rater_user_id Int

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@id([user_id, rater_user_id])
  @@map("ratings")
}

model ChatRoom {
  id Int @id @default(autoincrement())

  name       String
  created_at DateTime @default(now())

  chatMessages ChatMessage[]

  @@map("chat_rooms")
}

model ChatMember {
  id         String  @id @default(uuid())
  is_admin   Boolean @default(false)
  is_blocked Boolean @default(false)

  user    User @relation(fields: [user_id], references: [id])
  user_id Int

  creator         User @relation(fields: [user_creator_id], references: [id], name: "creator")
  user_creator_id Int

  @@map("chat_members")
}

model ChatMessage {
  id      String @id @default(uuid())
  content String @db.Text

  user    User @relation(fields: [user_id], references: [id])
  user_id Int

  chatRoom     ChatRoom @relation(fields: [chat_room_id], references: [id])
  chat_room_id Int

  parentChatMessage      ChatMessage? @relation(fields: [parent_chat_message_id], references: [id], name: "parentMessage")
  parent_chat_message_id String?

  childMessages ChatMessage[] @relation(name: "parentMessage")

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@map("chat_messages")
}

model NoticationMessage {
  id         Int      @id @default(autoincrement())
  identifier String   @unique
  title      String
  content    String?
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@map("notification_messages")
}

model Notification {
  id      String  @id @default(uuid())
  is_read Boolean @default(false)
  action  String?

  created_at DateTime @default(now())

  @@map("notifications")
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                            Int       @id @default(autoincrement())
  name                          String
  email                         String    @unique
  email_validated_at            DateTime?
  phone_number                  String?   @unique
  phone_number_verified_at      DateTime?
  salt                          String
  password                      String
  profile_image                 String?
  cover_image                   String?
  gender                        String?
  date_of_birth                 DateTime? @db.Date
  introduction                  String?   @db.Text
  occupation                    String?
  interests                     String?   @db.Text
  hobbies                       String?   @db.Text
  website                       String?
  language_practice_preferences String?   @db.Text
  availability                  String?   @db.Text

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  addresses           Address[]
  socialMediaProfiles SocialMediaProfile[]
  userLanguages       UserLanguage[]
  followers           Follower[]           @relation(name: "followers")
  followings          Follower[]           @relation(name: "followings")
  raters              Rating[]             @relation(name: "raters")
  ratings             Rating[]             @relation(name: "ratings")
}

model SocialMediaProfile {
  id           Int    @id @default(autoincrement())
  profile_type String
  profile_url  String

  user    User @relation(fields: [user_id], references: [id])
  user_id Int
}

model EducationLevel {
  id          Int    @id @default(autoincrement())
  name        String @unique
  resume      String
  description String @db.Text
}

model Country {
  id   Int    @id @default(autoincrement())
  name String @unique
  code String @unique

  states State[]
}

model State {
  id   Int    @id @default(autoincrement())
  name String

  country    Country @relation(fields: [country_id], references: [id])
  country_id Int

  Cities City[]
}

model City {
  id   Int    @id @default(autoincrement())
  name String

  state    State @relation(fields: [state_id], references: [id])
  state_id Int

  addresses Address[]
}

model Address {
  id          Int      @id @default(autoincrement())
  address_1   String
  address_2   String?
  postal_code String
  latitude    Decimal?
  longitude   Decimal?
  type        String   @default("home")
  is_default  Boolean  @default(false)

  user    User @relation(fields: [user_id], references: [id])
  user_id Int

  city    City @relation(fields: [city_id], references: [id])
  city_id Int
}

model Language {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String   @db.Text
  difficulty  Int      @db.UnsignedTinyInt
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt

  userLanguages UserLanguage[]
}

model UserLanguage {
  level Int @db.UnsignedTinyInt

  language    Language @relation(fields: [language_id], references: [id])
  language_id Int

  user    User @relation(fields: [user_id], references: [id])
  user_id Int

  @@id([language_id, user_id])
}

model Post {
  id         Int      @id @default(autoincrement())
  title      String
  content    String   @db.MediumText
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  taggables Taggable[]
}

model Reel {
  id          Int      @id @default(autoincrement())
  title       String
  description String?  @db.Text
  reel_file   String
  created_at  DateTime @default(now())

  taggables Taggable[]
}

model Tag {
  id         Int      @id @default(autoincrement())
  name       String
  created_at DateTime @default(now())

  taggables Taggable[]
}

enum TaggableType {
  POST
  REEL
}

model Taggable {
  tag    Tag @relation(fields: [tag_id], references: [id])
  tag_id Int

  post Post? @relation(fields: [taggable_id], references: [id], map: "post_taggable_id")
  reel Reel? @relation(fields: [taggable_id], references: [id], map: "reel_taggable_id")

  taggable_type TaggableType @default(POST)
  taggable_id   Int

  @@id([tag_id, taggable_id, taggable_type])
}

model Follower {
  user    User @relation(fields: [user_id], references: [id], name: "followings")
  user_id Int

  follower         User @relation(fields: [follower_user_id], references: [id], name: "followers")
  follower_user_id Int

  created_at DateTime @default(now())

  @@id([user_id, follower_user_id])
}

model Rating {
  user    User @relation(fields: [user_id], references: [id], name: "raters")
  user_id Int

  rater         User @relation(fields: [rater_user_id], references: [id], name: "ratings")
  rater_user_id Int

  value Int @db.UnsignedTinyInt
  created_at DateTime @default(now())

  @@id([user_id, rater_user_id])
}
